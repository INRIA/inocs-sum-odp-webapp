generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id                          BigInt                    @id @default(autoincrement()) @db.UnsignedBigInt
  name                        String                    @unique(map: "categories_name_unique") @db.VarChar(255)
  description                 String?                   @db.Text
  type                        String                    @db.VarChar(50)
  created_at                  DateTime?                 @db.Timestamp(0)
  updated_at                  DateTime?                 @db.Timestamp(0)

  kpidefinitions_category     kpidefinitions_category[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model item_tag {
  id      Int    @id @default(autoincrement())
  item_id BigInt @db.UnsignedBigInt
  tag_id  BigInt @db.UnsignedBigInt
  items   items  @relation(fields: [item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "item_tag_item_id_foreign")
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "item_tag_tag_id_foreign")

  @@index([item_id], map: "item_tag_item_id_foreign")
  @@index([tag_id], map: "item_tag_tag_id_foreign")
}

model items {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  url         String?    @db.VarChar(512)
  name        String     @unique(map: "items_name_unique") @db.VarChar(255)
  orgname     String     @db.VarChar(400)
  picture     String?    @db.VarChar(255)
  file        String?    @db.VarChar(255)
  fileorgname String     @db.VarChar(255)
  project_id  BigInt     @db.UnsignedBigInt
  category_id BigInt     @db.UnsignedBigInt
  description String?    @db.Text
  status      String?    @db.VarChar(255)
  homepage    Boolean    @default(false)
  options     String?    @db.Text
  date        DateTime?  @db.Date
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  user_id     Int?
  visible     Int?       @db.TinyInt
  item_tag    item_tag[]

  messages    messages[]
}

model kpidefinitions {
  id                          BigInt              @id @default(autoincrement()) @db.UnsignedBigInt 
  parent_kpi_id               BigInt?              @db.UnsignedBigInt
  kpi_number                  String              @db.VarChar(50)
  type                        String              @db.VarChar(50)
  name                        String              @db.VarChar(100)
  description                 String              @db.Text
  metric                      String              @db.VarChar(50)
  metric_description          String?             @db.Text
  disclaimer                  String?             @db.Text
  progression_target          Int       
  min_value                   Float?              @db.Float
  max_value                   Float?              @db.Float
  created_at                  DateTime            @default(now()) @db.Timestamp(0)
  updated_at                  DateTime            @default(now()) @db.Timestamp(0)

  kpiresults                  kpiresults[]
  kpidefinitions_category     kpidefinitions_category[]
  children_kpis               kpidefinitions[]    @relation("kpi_parent_child")

  parent_kpi                  kpidefinitions?      @relation("kpi_parent_child", fields: [parent_kpi_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "kpidefinitions_parent_kpi_id_index")
  
  @@index([parent_kpi_id], map: "kpidefinitions_parent_kpi_id_index")
  @@index([kpi_number], map: "kpidefinitions_kpi_number_index")
}

model kpidefinitions_category {
  id                  BigInt             @id @default(autoincrement()) @db.UnsignedBigInt 
  kpidefinition_id    BigInt             @db.UnsignedBigInt
  category_id         BigInt             @db.UnsignedBigInt

  kpidefinition       kpidefinitions     @relation(fields: [kpidefinition_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "kpidefinitions_category_kpidefinition_id_foreign")
  category            categories         @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "kpidefinitions_category_category_id_foreign")

  @@index([kpidefinition_id], map: "kpidefinitions_category_kpidefinition_id_foreign")
  @@index([category_id], map: "kpidefinitions_category_category_id_foreign")
  @@unique([kpidefinition_id, category_id], map: "uniq_kpidefinition_category")
}

model kpiresults {
  id                  BigInt       @id @default(autoincrement()) @db.UnsignedBigInt 
  kpidefinition_id    BigInt       @db.UnsignedBigInt     
  living_lab_id       BigInt       @db.UnsignedBigInt     
  transport_mode_id   BigInt?      @db.UnsignedBigInt     
  value               Float        @db.Float
  description         String?      @db.VarChar(5000)
  date                DateTime     @db.Date
  created_at          DateTime     @default(now()) @db.Timestamp(0)
  updated_at          DateTime     @default(now()) @db.Timestamp(0)
  user_id             BigInt?      @db.UnsignedBigInt

  kpidefinition       kpidefinitions   @relation(fields: [kpidefinition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  living_lab          labs             @relation(fields: [living_lab_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  transport_mode      transport_mode?  @relation(fields: [transport_mode_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                users?           @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  messages            messages[]
}

model labs {
  id                                 BigInt                               @id @default(autoincrement()) @db.UnsignedBigInt
  name                               String                               @unique(map: "categories_name_unique") @db.VarChar(255)
  country                            String?                              @db.VarChar(512)
  flag                               String?                              @db.VarChar(512)
  description                        String?                              @db.Text
  area                               Int?                                 
  radius                             Int?                                 
  population                         Int?                                 
  country_code2                      String?                              @db.VarChar(512)
  lat                                String?                              @db.VarChar(25)
  lng                                String?                              @db.VarChar(25)
  created_at                         DateTime?                            @db.Timestamp(0)
  updated_at                         DateTime?                            @db.Timestamp(0)
  user_id                            BigInt?                              @db.UnsignedBigInt
  validated_at                       DateTime?                            @db.Timestamp(0)
  validated_by_user_id               BigInt?                              @db.UnsignedBigInt

  created_by                         users?                               @relation(name: "created_by", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "labs_user_id_foreign")
  validated_by                       users?                               @relation(name: "validated_by", fields: [validated_by_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "labs_validated_by_user_id_foreign")
  living_lab_projects_implementation        living_lab_projects_implementation[]
  transport_mode_living_lab_implementation  transport_mode_living_lab_implementation[]
  kpiresults                                kpiresults[]
  living_lab_user_relation                  living_lab_user_relation[]
  messages                                  messages[]

  @@index([validated_by_user_id], map: "labs_validated_by_user_id_foreign")
  @@index([user_id], map: "labs_user_id_foreign")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model projects {
  id                                 BigInt                               @id @default(autoincrement()) @db.UnsignedBigInt
  name                               String                               @unique(map: "projects_name_unique") @db.VarChar(255)
  description                        String?                              @db.Text
  created_at                         DateTime?                            @db.Timestamp(0)
  updated_at                         DateTime?                            @db.Timestamp(0)
  type                               String                               @db.VarChar(255)
  image_url                          String?                              @db.Text
  living_lab_projects_implementation living_lab_projects_implementation[]
}

model living_lab_projects_implementation {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  project_id    BigInt    @db.UnsignedBigInt
  living_lab_id BigInt    @db.UnsignedBigInt
  user_id       String?   @db.VarChar(255)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  start_at      DateTime? @db.Timestamp(0)
  description   String?   @db.Text

  project   projects @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lab_projects_project_id_foreign")
  lab       labs     @relation(fields: [living_lab_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "lab_projects_living_lab_id_foreign")
  messages  messages[]

  @@index([project_id], map: "lab_projects_project_id_foreign")
  @@index([living_lab_id], map: "lab_projects_living_lab_id_foreign")
  @@unique([living_lab_id, project_id], map: "uniq_lab_project")
}

model roles {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name        String    @unique(map: "roles_name_unique") @db.VarChar(255)
  description String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       users[]
}

model tags {
  id          BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  name        String     @unique(map: "tags_name_unique") @db.VarChar(255)
  color       String?    @db.VarChar(255)
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  description String?    @db.VarChar(1024)
  item_tag    item_tag[]
}

model users {
  id                            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name                          String    @db.VarChar(255)
  email                         String    @unique(map: "users_email_unique") @db.VarChar(255)
  role_id                       BigInt    @db.UnsignedBigInt
  email_verified_at             DateTime? @db.Timestamp(0)
  password                      String    @db.VarChar(255)
  status                        String    @db.VarChar(100)
  picture                       String?   @db.VarChar(255)
  location                      String?   @db.VarChar(255)
  phone                         String?   @db.VarChar(255)
  remember_token                String?   @db.VarChar(100)
  created_at                    DateTime? @db.Timestamp(0)
  updated_at                    DateTime? @db.Timestamp(0)

  role                          roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  kpiresults                    kpiresults[]
  created_labs                  labs[]    @relation(name: "created_by") @ignore
  validated_labs                labs[]    @relation(name: "validated_by") @ignore
  living_lab_user_relation      living_lab_user_relation[]
  messages_sent                 messages[] @relation(name: "from_user")
  messages_received             messages[] @relation(name: "to_user")

  @@index([role_id], map: "users_role_id_fkey")
}

model living_lab_user_relation {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id         BigInt    @db.UnsignedBigInt
  living_lab_id   BigInt    @db.UnsignedBigInt
  created_at      DateTime  @default(now()) @db.Timestamp(0)
  updated_at      DateTime  @default(now()) @db.Timestamp(0)

  user            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "llur_user_id_foreign")
  lab             labs      @relation(fields: [living_lab_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "llur_living_lab_id_foreign")

  @@index([user_id], map: "llur_user_id_foreign")
  @@index([living_lab_id], map: "llur_living_lab_id_foreign")
  @@unique([user_id, living_lab_id], map: "uniq_llur_user_lab")
}

model transport_mode {
  id          BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  name        String             @db.VarChar(255)
  description String?            @db.Text
  type        String?            @db.VarChar(255)
  created_at  DateTime?          @db.Timestamp(0)

  transport_mode_living_lab_implementation transport_mode_living_lab_implementation[]
  kpiresults            kpiresults[]
}

model transport_mode_living_lab_implementation {
  id                    BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  transport_mode_id     BigInt          @db.UnsignedBigInt
  living_lab_id         BigInt          @db.UnsignedBigInt
  status                String          @db.VarChar(255)

  transport_mode        transport_mode  @relation(fields: [transport_mode_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tmlli_transport_mode_id_foreign")
  lab                   labs            @relation(fields: [living_lab_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tmlli_living_lab_id_foreign")

  @@index([transport_mode_id], map: "tmlli_transport_mode_id_foreign")
  @@index([living_lab_id], map: "tmlli_living_lab_id_foreign")
  @@unique([transport_mode_id, living_lab_id], map: "uniq_tmlli")
}

model messages {
  id                                   BigInt       @id @default(autoincrement()) @db.UnsignedBigInt
  from_user_id                         BigInt       @db.UnsignedBigInt
  from_email                           String       @db.VarChar(255)
  to_user_id                           BigInt       @db.UnsignedBigInt
  to_email                             String       @db.VarChar(255)
  message                              String       @db.Text
  sent_at                              DateTime     @db.Timestamp(0) @default(now())
  living_lab_id                        BigInt?      @db.UnsignedBigInt
  created_at                           DateTime     @db.Timestamp(0)
  item_id                              BigInt?      @db.UnsignedBigInt
  kpiresult_id                         BigInt?      @db.UnsignedBigInt
  living_lab_project_implementation_id BigInt?      @db.UnsignedBigInt

  from_user   users?    @relation("from_user", fields: [from_user_id], references: [id])
  to_user     users?    @relation("to_user", fields: [to_user_id], references: [id])
  living_lab  labs?     @relation(fields: [living_lab_id], references: [id])
  item        items?    @relation(fields: [item_id], references: [id])
  kpiresult   kpiresults? @relation(fields: [kpiresult_id], references: [id])
  living_lab_project_implementation living_lab_projects_implementation? @relation(fields: [living_lab_project_implementation_id], references: [id])
}