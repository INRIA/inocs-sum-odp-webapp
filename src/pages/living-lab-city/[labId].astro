---
import Layout from "../../layouts/Layout.astro";
import ApiClient from "../../lib/api-client/ApiClient";
import { MapViewer } from "../../components/react/MapViewer";
import { TransportBadge } from "../../components/react/TransportBadge";
import {
  getNSMTransportModes,
  separateMeasures,
  getModalSplitKpiResults,
  createMapMarker,
} from "../../lib/helpers/living-lab";
import {
  DataDisplayCard,
  LivingLabKPIsView,
  LivingLabMeasures,
} from "../../components/react";

const api = new ApiClient(Astro.request);

const { labId } = Astro.params;
if (!labId) {
  return Astro.redirect("/404");
}
const livingLabData = await api.getLivingLab(labId);
if (!livingLabData) {
  return Astro.redirect("/");
}
const allTransportModes = (await api.getTransportModes()) ?? [];
const allKpis = (await api.getKPIs()) ?? [];
const categories = (await api.getCategories("KPI_SIEF")) ?? [];

// Prepare data for components
const nsmTransportModes = getNSMTransportModes(
  livingLabData,
  allTransportModes
);

const { pushMeasures, pullMeasures } = separateMeasures(
  livingLabData?.projects ?? []
);

const modalSplitKpis = getModalSplitKpiResults(
  allKpis,
  allTransportModes,
  livingLabData?.kpi_results ?? []
);

const mapMarker = createMapMarker(livingLabData);
const kpiResultsByCategory = categories.map((category) => ({
  ...category,
  kpiResults: livingLabData?.kpi_results?.filter((kpiResult) =>
    category.kpis?.some((kpi) => kpi.id === kpiResult.kpidefinition_id)
  ),
}));
---

<Layout>
  <div class="lg:mx-10 mx-auto px-1 py-4 flex flex-col gap-8">
    <h2>
      <strong>{livingLabData?.name}</strong> Living lab data dashboard
    </h2>

    <!-- Map Section -->
    <section class="flex flex-col lg:flex-row gap-4">
      <div class="h-96 w-full lg:w-3/4 rounded-lg overflow-hidden shadow-md">
        <MapViewer
          center={[mapMarker.coordinates.lat, mapMarker.coordinates.lng]}
          zoom={10}
          markers={[mapMarker]}
          scrollWheelZoom={true}
          client:only="react"
        />
      </div>
      <div class="w-full lg:w-1/4">
        <DataDisplayCard
          data={[
            { label: "Living Lab", value: livingLabData?.name },
            {
              label: "Location",
              //value: `${livingLabData?.city}, ${livingLabData?.country}`,
            },
            {
              label: "Population",
              value: livingLabData?.population,
            },
            {
              label: "Area (kmÂ²)",
              value: livingLabData?.area,
            },
            {
              label: "Density (inhabitants/kmÂ²)",
              value: livingLabData?.density,
            },
          ]}
        />
      </div>
    </section>

    <div class="flex flex-col gap-8">
      <!-- Transport Modes Section -->
      {
        nsmTransportModes.length > 0 && (
          <div class="flex flex-col gap-4">
            <h3 class="text-center">Shared Mobility Services</h3>
            <div class="flex flex-wrap gap-2 mx-auto">
              {nsmTransportModes.map((mode) => (
                <TransportBadge
                  name={mode.name}
                  size="xl"
                  color="secondary"
                  client:load
                />
              ))}
            </div>
          </div>
        )
      }
      <!-- Push & Pull Measures Section -->
      {
        (pushMeasures.length > 0 || pullMeasures.length > 0) && (
          <section class="flex flex-col gap-8 items-start">
            {pushMeasures.length > 0 && (
              <div class="flex-1 grid grid-cols-1 gap-2">
                <h3 class="text-center">ðŸ”´ Push measures</h3>
                <LivingLabMeasures
                  livingLabId={labId}
                  measures={pushMeasures}
                  isEditable={false}
                  title=""
                  implementedMeasures={
                    livingLabData?.living_lab_projects_implementation ?? []
                  }
                  measuresGrids={2}
                />
              </div>
            )}
            {pullMeasures.length > 0 && (
              <div class="flex-1 grid grid-cols-1 gap-2">
                <h3 class="text-center">ðŸŸ¢ Pull measures</h3>
                <LivingLabMeasures
                  livingLabId={labId}
                  measures={pullMeasures}
                  isEditable={false}
                  title=""
                  implementedMeasures={
                    livingLabData?.living_lab_projects_implementation ?? []
                  }
                  measuresGrids={2}
                />
              </div>
            )}
          </section>
        )
      }
    </div>

    <!-- KPIs Section -->
    {
      livingLabData?.kpi_results && livingLabData?.kpi_results?.length > 0 ? (
        <section class="flex flex-col gap-4">
          <h3 class="text-center">Key Performance Indicators (KPIs)</h3>

          <div class="flex flex-wrap gap-0">
            <LivingLabKPIsView modalSplitKpis={modalSplitKpis} client:load />
          </div>

          <div class="flex flex-wrap gap-0">
            <LivingLabKPIsView
              categories={kpiResultsByCategory ?? []}
              kpis={allKpis}
              client:load
            />
          </div>
        </section>
      ) : null
    }
  </div>
</Layout>
